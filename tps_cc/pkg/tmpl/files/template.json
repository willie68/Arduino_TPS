{
"equalsA": [
		"tmpValue = b;b = a;a = tmpValue;",
		"b=a",
		"c=a",
		"d=a",
		"doPort(a)",
		"digitalWrite(Dout_1, (a & 0x01) > 0)",
		"digitalWrite(Dout_2, (a & 0x01) > 0)",
		"digitalWrite(Dout_3, (a & 0x01) > 0)",
		"digitalWrite(Dout_4, (a & 0x01) > 0)",
		"tmpValue = a * 16;analogWrite(PWM_1, tmpValue)",
		"tmpValue = a * 16;analogWrite(PWM_2, tmpValue)",
		"#ifdef TPS_SERVO\r\n  tmpValue = ((a & 0x0f) * 10) + 10;\r\n  servo1.write(tmpValue);\r\n  #endif",
		"#ifdef TPS_SERVO\r\n  tmpValue = ((a & 0x0f) * 10) + 10;\r\n  servo2.write(tmpValue);\r\n  #endif",
		"e=a",
		"f=a",
		"push()"
    ],
	"aEquals": [
		"a=a",
		"a=b",
		"a=c",
		"a=d",
		"a = digitalRead(Din_1) + (digitalRead(Din_2) << 1) + (digitalRead(Din_3) << 2) + (digitalRead(Din_4) << 3)",
		"a = digitalRead(Din_1)",
		"a = digitalRead(Din_2)",
		"a = digitalRead(Din_3)",
		"a = digitalRead(Din_4)",
		"tmpValue = analogRead(ADC_0); a = tmpValue / 64;  //(Umrechnen auf 4 bit)",
		"tmpValue = analogRead(ADC_1); a = tmpValue / 64;  //(Umrechnen auf 4 bit)",
		"#ifdef TPS_RCRECEIVER\r\n  tmpValue = pulseIn(RC_0, HIGH, 100000);\r\n  if (tmpValue < 1000) {\r\n    tmpValue = 1000;\r\n  }\r\n  if (tmpValue > 2000) {\r\n    tmpValue = 2000;\r\n  }\r\n  a = (tmpValue - 1000) / 64; //(Umrechnen auf 4 bit)\r\n#endif",
		"#ifdef TPS_RCRECEIVER\r\n  tmpValue = pulseIn(RC_1, HIGH, 100000);\r\n  if (tmpValue < 1000) {\r\n    tmpValue = 1000;\r\n  }\r\n  if (tmpValue > 2000) {\r\n    tmpValue = 2000;\r\n  }\r\n  a = (tmpValue - 1000) / 64; //(Umrechnen auf 4 bit)\r\n#endif",
		"a=e",
		"a=f",
		"pop()"
	],
	"aCalc" :[
		"a=a",
		"a=a+1",
		"a=a-1",
		"a=a+b",
		"a=a-b",
		"a=a*b",
		"a=a/b",
		"a=a&b",
		"a=a|b",
		"a=a^b",
		"a=~a",
		"a=a%b",
		"a=b-a",
		"a=a>>1",
		"a=a<<1",
		"pop()"
	],
	"skipIf": [
		"a==0",
		"a>b",
		"a<b",
		"a==b",
		"digitalRead(Din_1)",
		"digitalRead(Din_2)",
		"digitalRead(Din_3)",
		"digitalRead(Din_4)",
		"!digitalRead(Din_1)",
		"!digitalRead(Din_2)",
		"!digitalRead(Din_3)",
		"!digitalRead(Din_4)",
		"!digitalRead(SW_PRG)",
		"!digitalRead(SW_SEL)",
		"digitalRead(SW_PRG)",
		"digitalRead(SW_SEL)"
	],
	"aBytes": [
		"a=getAnalog(ADC_0)",
		"a=getAnalog(ADC_1)",
		"#ifdef TPS_RCRECEIVER\r\n  tmpValue = pulseIn(RC_0, HIGH, 100000);\r\n  if (tmpValue < 1000) {\r\n    tmpValue = 1000;\r\n  }\r\n  if (tmpValue > 2000) {\r\n    tmpValue = 2000;\r\n  }\r\n  a = (tmpValue - 1000) / 4; //(Umrechnen auf 8 bit)\r\n#endif",		"",
		"#ifdef TPS_RCRECEIVER\r\n  tmpValue = pulseIn(RC_1, HIGH, 100000);\r\n  if (tmpValue < 1000) {\r\n    tmpValue = 1000;\r\n  }\r\n  if (tmpValue > 2000) {\r\n    tmpValue = 2000;\r\n  }\r\n  a = (tmpValue - 1000) / 4; //(Umrechnen auf 8 bit)\r\n#endif",		"",
		"analogWrite(PWM_1, a);",
		"analogWrite(PWM_2, a);",
		"#ifdef TPS_SERVO\r\n  tmpValue = map(a, 0, 255, 0, 180);\r\n  servo1.write(tmpValue);\r\n  #endif\r\n",
		"#ifdef TPS_SERVO\r\n  tmpValue = map(a, 0, 255, 0, 180);\r\n  servo2.write(tmpValue);\r\n  #endif\r\n",
		"#ifdef TPS_TONE\r\n  if (a == 0) {\r\n    noTone(TONE_OUT);\r\n  } else {\r\n    if (between(a, MIDI_START, MIDI_START + MIDI_NOTES)) {\r\n      word frequenz = getFrequency(a);\r\n      tone(TONE_OUT, frequenz);\r\n    }\r\n  }\r\n  #endif\r\n",
		"",
		"",
		"",
		"",
		"#ifdef __AVR_ATmega328P__\r\n  digitalWrite(LED_BUILTIN, 0);\r\n#endif",
		"#ifdef __AVR_ATmega328P__\r\n  digitalWrite(LED_BUILTIN, 1);\r\n#endif",
		""
	],
	"debug" : "#define debug",
	"boards": {
		"arduino_uno": "arduino:avr:uno",
		"arduino_nano": "arduino:avr:nano"
	}
}